g++ -o http HttpServer.cc -std=c++11 -lpthread
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp: In member function ‘void HttpRequest::RequestHeaderParse()’:
Protocol.hpp:68:16: error: conflicting declaration ‘std::string v’
    std::string v;
                ^
Protocol.hpp:65:29: error: ‘v’ has a previous declaration as ‘std::vector<std::basic_string<char> > v’
    std::vector<std::string> v;
                             ^
Protocol.hpp:71:26: error: no matching function for call to ‘Util::MakeKV(__gnu_cxx::__alloc_traits<std::allocator<std::basic_string<char> > >::value_type&, std::string&, std::vector<std::basic_string<char> >&)’
     Util::MakeKV(v[i],k,v);
                          ^
Protocol.hpp:71:26: note: candidate is:
In file included from Protocol.hpp:15:0,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
Util.hpp:39:15: note: static void Util::MakeKV(std::string&, std::string&, std::string&)
   static void MakeKV(std::string& s,std::string& k,std::string& v)
               ^
Util.hpp:39:15: note:   no known conversion for argument 3 from ‘std::vector<std::basic_string<char> >’ to ‘std::string& {aka std::basic_string<char>&}’
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp:72:29: error: cannot bind ‘std::basic_ostream<char>’ lvalue to ‘std::basic_ostream<char>&&’
     cout<<"i="<<i<<"Key:"<<k<<" Value: "<<v<<endl;
                             ^
In file included from /usr/include/c++/4.8.2/iostream:39:0,
                 from Protocol.hpp:4,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
/usr/include/c++/4.8.2/ostream:602:5: error:   initializing argument 1 of ‘std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&&, const _Tp&) [with _CharT = char; _Traits = std::char_traits<char>; _Tp = std::vector<std::basic_string<char> >]’
     operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
     ^
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp:73:29: error: no matching function for call to ‘std::unordered_map<std::basic_string<char>, std::basic_string<char> >::insert(std::pair<std::basic_string<char>, std::vector<std::basic_string<char> > >)’
     um.insert(make_pair(k,v));
                             ^
Protocol.hpp:73:29: note: candidates are:
In file included from /usr/include/c++/4.8.2/unordered_map:48:0,
                 from Protocol.hpp:8,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
/usr/include/c++/4.8.2/bits/unordered_map.h:362:7: note: std::pair<typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::is_default_constructible<_Hash>, std::is_copy_assignable<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::iterator, bool> std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(const value_type&) [with _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >; typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::is_default_constructible<_Hash>, std::is_copy_assignable<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::iterator = std::__detail::_Node_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::value_type = std::pair<const std::basic_string<char>, std::basic_string<char> >]
       insert(const value_type& __x)
       ^
/usr/include/c++/4.8.2/bits/unordered_map.h:362:7: note:   no known conversion for argument 1 from ‘std::pair<std::basic_string<char>, std::vector<std::basic_string<char> > >’ to ‘const value_type& {aka const std::pair<const std::basic_string<char>, std::basic_string<char> >&}’
/usr/include/c++/4.8.2/bits/unordered_map.h:369:2: note: template<class _Pair, class> std::pair<typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::is_default_constructible<_Hash>, std::is_copy_assignable<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::iterator, bool> std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_Pair&&) [with _Pair = _Pair; <template-parameter-2-2> = <template-parameter-1-2>; _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >]
  insert(_Pair&& __x)
  ^
/usr/include/c++/4.8.2/bits/unordered_map.h:369:2: note:   template argument deduction/substitution failed:
/usr/include/c++/4.8.2/bits/unordered_map.h:365:32: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
       template<typename _Pair, typename = typename
                                ^
/usr/include/c++/4.8.2/bits/unordered_map.h:396:7: note: std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator, const value_type&) [with _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator = std::__detail::_Node_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator = std::__detail::_Node_const_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::value_type = std::pair<const std::basic_string<char>, std::basic_string<char> >]
       insert(const_iterator __hint, const value_type& __x)
       ^
/usr/include/c++/4.8.2/bits/unordered_map.h:396:7: note:   candidate expects 2 arguments, 1 provided
/usr/include/c++/4.8.2/bits/unordered_map.h:403:2: note: template<class _Pair, class> std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::iterator std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::const_iterator, _Pair&&) [with _Pair = _Pair; <template-parameter-2-2> = <template-parameter-1-2>; _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >]
  insert(const_iterator __hint, _Pair&& __x)
  ^
/usr/include/c++/4.8.2/bits/unordered_map.h:403:2: note:   template argument deduction/substitution failed:
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp:73:29: note:   cannot convert ‘std::make_pair(_T1&&, _T2&&) [with _T1 = std::basic_string<char>&; _T2 = std::vector<std::basic_string<char> >&; typename std::__decay_and_strip<_T2>::__type = std::vector<std::basic_string<char> >; typename std::__decay_and_strip<_Tp>::__type = std::basic_string<char>]((* & v))’ (type ‘std::pair<std::basic_string<char>, std::vector<std::basic_string<char> > >’) to type ‘std::unordered_map<std::basic_string<char>, std::basic_string<char> >::const_iterator {aka std::__detail::_Node_const_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>}’
     um.insert(make_pair(k,v));
                             ^
In file included from /usr/include/c++/4.8.2/unordered_map:48:0,
                 from Protocol.hpp:8,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
/usr/include/c++/4.8.2/bits/unordered_map.h:418:2: note: template<class _InputIterator> void std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator, _InputIterator) [with _InputIterator = _InputIterator; _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >]
  insert(_InputIterator __first, _InputIterator __last)
  ^
/usr/include/c++/4.8.2/bits/unordered_map.h:418:2: note:   template argument deduction/substitution failed:
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp:73:29: note:   candidate expects 2 arguments, 1 provided
     um.insert(make_pair(k,v));
                             ^
In file included from /usr/include/c++/4.8.2/unordered_map:48:0,
                 from Protocol.hpp:8,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
/usr/include/c++/4.8.2/bits/unordered_map.h:429:7: note: void std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(std::initializer_list<typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::is_default_constructible<_Hash>, std::is_copy_assignable<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::value_type>) [with _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >; typename std::_Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc, std::__detail::_Select1st, _Pred, _Hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>, std::is_default_constructible<_Hash>, std::is_copy_assignable<_Hash>, std::__detail::__is_noexcept_hash<_Key, _Hash> > >::value, false, true> >::value_type = std::pair<const std::basic_string<char>, std::basic_string<char> >]
       insert(initializer_list<value_type> __l)
       ^
/usr/include/c++/4.8.2/bits/unordered_map.h:429:7: note:   no known conversion for argument 1 from ‘std::pair<std::basic_string<char>, std::vector<std::basic_string<char> > >’ to ‘std::initializer_list<std::pair<const std::basic_string<char>, std::basic_string<char> > >’
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp: In member function ‘int HttpRequest::GetContentLength()’:
Protocol.hpp:81:34: error: no match for ‘operator[]’ (operand types are ‘std::unordered_map<std::basic_string<char>, std::basic_string<char> >’ and ‘std::__detail::_Node_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>’)
     return (Util::StringToInt((um[pos]->second)));
                                  ^
Protocol.hpp:81:34: note: candidates are:
In file included from /usr/include/c++/4.8.2/unordered_map:48:0,
                 from Protocol.hpp:8,
                 from HttpServer.hpp:4,
                 from HttpServer.cc:1:
/usr/include/c++/4.8.2/bits/unordered_map.h:595:7: note: std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&) [with _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = std::basic_string<char>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = std::basic_string<char>]
       operator[](const key_type& __k)
       ^
/usr/include/c++/4.8.2/bits/unordered_map.h:595:7: note:   no known conversion for argument 1 from ‘std::__detail::_Node_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>’ to ‘const key_type& {aka const std::basic_string<char>&}’
/usr/include/c++/4.8.2/bits/unordered_map.h:599:7: note: std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type&&) [with _Key = std::basic_string<char>; _Tp = std::basic_string<char>; _Hash = std::hash<std::basic_string<char> >; _Pred = std::equal_to<std::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::basic_string<char>, std::basic_string<char> > >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type = std::basic_string<char>; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = std::basic_string<char>]
       operator[](key_type&& __k)
       ^
/usr/include/c++/4.8.2/bits/unordered_map.h:599:7: note:   no known conversion for argument 1 from ‘std::__detail::_Node_iterator<std::pair<const std::basic_string<char>, std::basic_string<char> >, false, true>’ to ‘std::unordered_map<std::basic_string<char>, std::basic_string<char> >::key_type&& {aka std::basic_string<char>&&}’
In file included from HttpServer.hpp:4:0,
                 from HttpServer.cc:1:
Protocol.hpp: In static member function ‘static void* Entry::HandlRequest(void*)’:
Protocol.hpp:194:8: error: ‘class EndPoint’ has no member named ‘RequestHeaderParse’
    ep->RequestHeaderParse();
        ^
make: *** [http] Error 1
